addPolygons(data=unesco_kultur, color="white", fillColor ='red', weight=0.8, fillOpacity = 0.7)%>%
#addMarkers(data=unesco_site)%>%
addProviderTiles(providers$Esri.WorldTopoMap)%>%
addLegend(color=c("#0c5da5", "#094275"), labels = c("buffer zone", "world heritage property"))
map_unesco
#create map
map_unesco<-leaflet() %>%
addPolygons(data=unesco_natur, color="white", fillColor ='red', weight=0.8, fillOpacity = 0.7)%>%
addPolygons(data=unesco_kultur, color="white", fillColor ='green', weight=0.8, fillOpacity = 0.7)%>%
#addMarkers(data=unesco_site)%>%
addProviderTiles(providers$Esri.WorldTopoMap)%>%
addLegend(color=c("#0c5da5", "#094275"), labels = c("buffer zone", "world heritage property"))
map_unesco
#create map
map_unesco<-leaflet() %>%
addPolygons(data=unesco_natur, color="white", fillColor ='red', weight=0.8, fillOpacity = 0.7)%>%
addPolygons(data=unesco_kultur, color="white", fillColor ='green', weight=0.8, fillOpacity = 0.7)%>%
addMarkers(unesco_kultur)%>%
#addMarkers(data=unesco_site)%>%
addProviderTiles(providers$Esri.WorldTopoMap)%>%
addLegend(color=c("#0c5da5", "#094275"), labels = c("buffer zone", "world heritage property"))
#create map
map_unesco<-leaflet() %>%
addPolygons(data=unesco_natur, color="white", fillColor ='red', weight=0.8, fillOpacity = 0.7)%>%
addPolygons(data=unesco_kultur, color="white", fillColor ='green', weight=0.8, fillOpacity = 0.7)%>%
#addMarkers(unesco_kultur)%>%
#addMarkers(data=unesco_site)%>%
addProviderTiles(providers$Esri.WorldTopoMap)%>%
addLegend(color=c("#0c5da5", "#094275"), labels = c("buffer zone", "world heritage property"))
map_unesco
#create map
map_unesco<-leaflet() %>%
addPolygons(data=unesco_natur, color="white", fillColor ='red', weight=0.8, fillOpacity = 0.7)%>%
addPolygons(data=unesco_kultur, color="white", fillColor ='green', weight=0.8, fillOpacity = 0.7)%>%
#addMarkers(unesco_kultur)%>%
#addMarkers(data=unesco_site)%>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(opacity = 0.7))%>%
addLegend(color=c("#0c5da5", "#094275"), labels = c("buffer zone", "world heritage property"))
map_unesco
#create map
map_unesco<-leaflet() %>%
addPolygons(data=unesco_natur, color="white", fillColor ='red', weight=0.8, fillOpacity = 0.7)%>%
addPolygons(data=unesco_kultur, color="white", fillColor ='blue', weight=0.8, fillOpacity = 0.7)%>%
#addMarkers(unesco_kultur)%>%
#addMarkers(data=unesco_site)%>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(opacity = 0.7))%>%
addLegend(color=c("#0c5da5", "#094275"), labels = c("buffer zone", "world heritage property"))
map_unesco
#create map
map_unesco<-leaflet() %>%
addPolygons(data=unesco_natur, color="white", fillColor ='red', weight=0.8, fillOpacity = 0.7)%>%
addPolygons(data=unesco_kultur, color="white", fillColor ='blue', weight=0.8, fillOpacity = 0.7)%>%
#addMarkers(unesco_kultur)%>%
#addMarkers(data=unesco_site)%>%
addProviderTiles(providers$CartoDB.Positron, options = providerTileOptions(opacity = 0.7))%>%
addLegend(color=c("red", "blue"), labels = c("natural", "cultural"))
map_unesco
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(jsonlite)
library(ggplot2)
library(dplyr)
#read in json data for texts per journals
data_lavaux<-fromJSON("../PyCharm/textanalysis/data/08_texts_per_magazine/lavaux.json", flatten=TRUE)
data_rhb<-fromJSON("../PyCharm/textanalysis/data/08_texts_per_magazine/rhb.json", flatten=TRUE)
data_suonen<-fromJSON("../PyCharm/textanalysis/data/08_texts_per_magazine/suonen.json", flatten = TRUE)
#save data as dataframe & rename the columns
data_rhb_df<-as.data.frame(as.matrix(data_rhb))
data_lavaux_df<-as.data.frame(as.matrix(data_lavaux))
data_lavaux_df<-cbind(journal=rownames(data_lavaux_df), data_lavaux_df)%>%
cbind(topic="lavaux")
data_lavaux_df$V1<-unlist(data_lavaux_df$V1)
rownames(data_lavaux_df)<-NULL
data_rhb_df<-cbind(journal=rownames(data_rhb_df), data_rhb_df)%>%
cbind(topic="rhb")
data_rhb_df$V1<-unlist(data_rhb_df$V1)
rownames(data_rhb_df)<- NULL
data_journals<-data_rhb_df%>%
rbind(data_lavaux_df)
png("plots/texts_per_journal.png")
#make boxplot for texts per journal
ggplot(data_journals, aes(x=topic, y=V1, fill=topic, color=topic)) +
geom_boxplot()+
scale_y_continuous(trans="log10", limits=c(1, 1200))+
#annotation_logticks(sides="lr")+
ylab("article count per magazine [count]")+
theme_bw()+
theme(legend.position = "none")+
xlab("")+
scale_fill_manual(values=c("#a8bcf6", "#ff9d86"))+
scale_color_manual(values=c("#0c5da5", "#ff3100"))
dev.off()
#save data as dataframe & rename the columns
data_rhb_df<-as.data.frame(as.matrix(data_rhb))
data_lavaux_df<-as.data.frame(as.matrix(data_lavaux))
data_lavaux_df<-cbind(journal=rownames(data_lavaux_df), data_lavaux_df)%>%
cbind(topic="lavaux")
data_lavaux_df$V1<-unlist(data_lavaux_df$V1)
rownames(data_lavaux_df)<-NULL
data_rhb_df<-cbind(journal=rownames(data_rhb_df), data_rhb_df)%>%
cbind(topic="rhb")
data_rhb_df$V1<-unlist(data_rhb_df$V1)
rownames(data_rhb_df)<- NULL
data_journals<-data_rhb_df%>%
rbind(data_lavaux_df)
#png("plots/texts_per_journal.png")
#make boxplot for texts per journal
ggplot(data_journals, aes(x=topic, y=V1, fill=topic, color=topic)) +
geom_boxplot()+
scale_y_continuous(trans="log10", limits=c(1, 1200))+
#annotation_logticks(sides="lr")+
ylab("article count per magazine [count]")+
theme_bw()+
theme(legend.position = "none")+
xlab("")+
scale_fill_manual(values=c("#a8bcf6", "#ff9d86"))+
scale_color_manual(values=c("#0c5da5", "#ff3100"))
#dev.off()
View(data_rhb_df)
View(data_rhb_df)
mean(data_rhb_df$V1)
median(data_rhb_df$V1)
mean(data_lavaux_df$V1)
median(data_lavaux_df$V1)
max(data_lavaux_df$V1)
summarise(data_lavaux_df)
summarise(data_lavaux_df$V1)
quantile(data_lavaux_df$V1, 0.75)
quantile(data_rhb_df$V1, 0.75)
summary(data_rhb_df$V1)
mean(data_lavaux_df$V1)
summary(data_rhb_df$V1)
summary(data_rhb_df$V1)
summary(data_rhb_df$V1)
summary(data_lavaux_df$V1)
summary(data_rhb_df$V1)
summary(data_lavaux_df$V1)
summary(data_rhb_df$V1)
summary(data_lavaux_df$V1)
summary(data_rhb_df$V1)
summary(data_lavaux_df$V1)
summary(data_rhb_df$V1)
summary(data_lavaux_df$V1)
#read in json data for texts per journals
flickr_lavaux<-fromJSON("../PyCharm/imageprocessing/data/03_image_per_user/lavaux.json", flatten=TRUE)
flickr_rhb<-fromJSON("../PyCharm/imageprocessing/data/03_image_per_user/rhb.json", flatten=TRUE)
#save data as dataframe & rename the columns
flickr_rhb_df<-as.data.frame(as.matrix(flickr_rhb))
flickr_lavaux_df<-as.data.frame(as.matrix(flickr_lavaux))
flickr_lavaux_df<-cbind(journal=rownames(flickr_lavaux_df), flickr_lavaux_df)%>%
cbind(topic="lavaux")
flickr_lavaux_df$V1<-unlist(flickr_lavaux_df$V1)
rownames(flickr_lavaux_df)<-NULL
flickr_rhb_df<-cbind(journal=rownames(flickr_rhb_df), flickr_rhb_df)%>%
cbind(topic="rhb")
flickr_rhb_df$V1<-unlist(flickr_rhb_df$V1)
rownames(flickr_rhb_df)<- NULL
data_flickr<-flickr_rhb_df%>%
rbind(flickr_lavaux_df)
#png("plots/images_per_user.png")
#make boxplot for images per user
ggplot(data_flickr, aes(x=topic, y=V1, fill=topic, color=topic)) +
geom_boxplot()+
scale_y_continuous(trans="log10", limits=c(1, 1200))+
#annotation_logticks(sides="lr")+
ylab("image count per user [count]")+
theme_bw()+
theme(legend.position = "none")+
xlab("")+
scale_fill_manual(values=c("#a8bcf6", "#ff9d86"))+
scale_color_manual(values=c("#0c5da5", "#ff3100"))
#dev.off()
summary(flickr_rhb_df$V1)
summary(flickr_rhb_df$V1)
summary(flickr_lavaux_df$V1)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(jsonlite)
library(ggplot2)
library(dplyr)
#read in data
lavaux_categories<-read.csv("data/lavaux_landschaft.csv", sep=";")
lavaux_subset<-lavaux_categories%>%subset(category!='')
#group data and aggregate according to count
lavaux_categories_grouped <- lavaux_categories %>% group_by(category)%>%
summarise(count = sum(count))%>% na.omit()%>%subset(category!='')
#calculate percentage of each category
lavaux_categories_grouped$percentage<-lavaux_categories_grouped$count/sum(lavaux_categories_grouped$count)*100
lavaux_categories_grouped$site<-"lavaux"
#read in data
rhb_categories<-read.csv("data/rhb_landschaft.csv", sep=";")
rhb_subset<-rhb_categories%>%subset(category!='')
#group data and aggregate according to count
rhb_categories_grouped <- rhb_categories %>% group_by(category)%>%
summarise(count = sum(count))%>% na.omit()%>%subset(category!='')
#calculate percentage of each category
rhb_categories_grouped$percentage<-rhb_categories_grouped$count/sum(rhb_categories_grouped$count)*100
rhb_categories_grouped$site<-"rhb"
#bind data
data_categories<-rhb_categories_grouped%>%
rbind(lavaux_categories_grouped)
#plotting data
#png("plots/categories_text.png")
ggplot(data_categories, aes(x=category, y=percentage, fill=site))+
geom_bar(stat="identity", position = position_dodge(), width = 0.5)+
theme_minimal()+
ylim(0,80)+
ylab("percentage [%]")+
scale_fill_manual(values=c("#0c5da5", "#ff3100"))+
xlab("")
#dev.off()
View(data_categories)
View(data_categories)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(jsonlite)
library(ggplot2)
library(dplyr)
library(forcats)
#read in data
lavaux_categories<-read.csv("data/lavaux_landschaft.csv", sep=";")
lavaux_categories$word<-as.factor(lavaux_categories$word)%>%
fct_reorder(lavaux_categories$count)
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()
??ft_reorder
??fct_reorder
lavaux_categories$word<-as.factor(lavaux_categories$word)%>%
fct_reorder(lavaux_categories$count, desc=T)
lavaux_categories$word<-as.factor(lavaux_categories$word)%>%
fct_reorder2(lavaux_categories$count)
lavaux_categories$word<-as.factor(lavaux_categories$word)%>%
fct_reorder(lavaux_categories$count, .desc=T)
#read in data
lavaux_categories<-read.csv("data/lavaux_landschaft.csv", sep=";")
#factorize words and sort in descending order
lavaux_categories$word<-as.factor(lavaux_categories$word)%>%
fct_reorder(lavaux_categories$count, .desc=T)
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()
#dev.off()
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()
#dev.off()
png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
xlab("")
dev.off()
??geom_col
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col(width=0.01, labels(=NULL))
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col(width=0.01, labels=NULL))
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col(width=0.01, labels=NULL)
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col(width=0.1)+
scale_x_continuous(labels=NULL)
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col(width=0.1)+
scale_x_binned(labels=NULL)
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col(width=0.1)+
scale_x_discrete(labels=NULL)
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col(width=0.2)+
scale_x_discrete(labels=NULL)
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col(width=0.4)+
scale_x_discrete(labels=NULL)
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)
png("plots/categories_text123123.png")
png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)
dev.off()
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
scale_y_
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)
#dev.off()
??geom_line
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(data=z, aes(xintercept = 'landschaft'), colour="black")
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline('bern', 'dotted', 'red', 0.2)
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = 'bern')
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = 'fribourg')
#dev.off()
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = 'fribourg', color='red')
lavaux_categories[!duplicated(lavaux_categories$count),]
lavaux_categories[!duplicated(lavaux_categories$count==8),]
lavaux_categories[!duplicated(lavaux_categories$count==15),]
lavaux_categories$count==15
lavaux_categories[(lavaux_categories$count==15),]
lavaux_categories[!duplicated(lavaux_categories$count==15),word]
lavaux_categories[!duplicated(lavaux_categories$count==15),]
lavaux_categories[(lavaux_categories$count==15),]
res <- sqldf("select  word
from lavaux_categories
where counut ==15")
library(sqldf)
res <- sqldf("select  word
from lavaux_categories
where counut ==15")
res <- sqldf("select  word
from lavaux_categories
where count ==15")
View(res)
res <- sqldf("select  min(word)
from lavaux_categories
where count ==15")
View(res)
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = res, color='red')
View(res)
res
res[0]
res[1]
as.character(res)
res <- sqldf("select  min(word)
from lavaux_categories
where count ==15")%>%as.character
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = res, color='red')
where count ==8")%>%as.character()
res <- sqldf("select  min(word)
from lavaux_categories
where count ==8")%>%as.character()
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = res, color='red')
#extract x_intercept
x_intercept <- sqldf("select  min(word)
from lavaux_categories
where count ==8")%>%as.character()
#png("plots/categories_text123123.png")
ggplot(lavaux_categories, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = x_intercept, color='red')
#read in data
rhb_landschaft<-read.csv("data/rhb_landschaft.csv", sep=";")
#read in data
rhb_landschaft<-read.csv("data/rhb_landschaft.csv", sep=";")
#read in data
rhb_landschaft<-read.csv("data/rhb_landschaft.csv", sep=";")
#factorize words and sort in descending order
rhb_landschaft$word<-as.factor(rhb_landschaft$word)%>%
fct_reorder(rhb_landschaft$count, .desc=T)
x_intercept_rhb_land <- sqldf("select  min(word)
from rhb_landschaft
where count ==8")%>%as.character()
ggplot(rhb_landschaft, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = x_intercept_rhb_land, color='red')
ggplot(rhb_landschaft, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = x_intercept_rhb_land, color='red')
where count ==7")%>%as.character()
x_intercept_rhb_land <- sqldf("select  min(word)
from rhb_landschaft
where count ==7")%>%as.character()
where count ==22")%>%as.character()
x_intercept_lavaux_flickr <- sqldf("select  min(word)
from lavaux_flickr
where count ==22")%>%as.character()
#read in data
lavaux_flickr<-read.csv("data/lavaux_flickr.csv", sep=";")
#factorize words and sort in descending order
lavaux_flickr$word<-as.factor(lavaux_flickr$word)%>%
fct_reorder(lavaux_flickr$count, .desc=T)
#read in data
rhb_flickr<-read.csv("data/rhb_flickr.csv", sep=";")
#factorize words and sort in descending order
rhb_flickr$word<-as.factor(rhb_flickr$word)%>%
fct_reorder(rhb_flickr$count, .desc=T)
x_intercept_lavaux_flickr <- sqldf("select  min(word)
from lavaux_flickr
where count ==22")%>%as.character()
x_intercept_rhb_flickr <- sqldf("select  min(word)
from rhb_flickr
where count ==52")%>%as.character()
ggplot(lavaux_flickr, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = x_intercept_lavaux_flickr, color='red')
ggplot(rhb_flickr, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = x_intercept_rhb_flickr, color='red')
View(rhb_flickr)
ggplot(rhb_landschaft, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = x_intercept_rhb_land, color='red')
ggplot(lavaux_flickr, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = x_intercept_lavaux_flickr, color='red')
ggplot(rhb_flickr, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = x_intercept_rhb_flickr, color='red')
png("plots/histogram_lavaux_text.png")
ggplot(lavaux_landschaft, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = x_intercept_lav_land, color='red')
#read in data
lavaux_landschaft<-read.csv("data/lavaux_landschaft.csv", sep=";")
#factorize words and sort in descending order
lavaux_landschaft$word<-as.factor(lavaux_landschaft$word)%>%
fct_reorder(lavaux_landschaft$count, .desc=T)
#read in data
rhb_landschaft<-read.csv("data/rhb_landschaft.csv", sep=";")
#factorize words and sort in descending order
rhb_landschaft$word<-as.factor(rhb_landschaft$word)%>%
fct_reorder(rhb_landschaft$count, .desc=T)
#extract x_intercept
x_intercept_lav_land <- sqldf("select  min(word)
from lavaux_landschaft
where count ==8")%>%as.character()
x_intercept_rhb_land <- sqldf("select  min(word)
from rhb_landschaft
where count ==7")%>%as.character()
x_intercept_lavaux_flickr <- sqldf("select  min(word)
from lavaux_flickr
where count ==22")%>%as.character()
x_intercept_rhb_flickr <- sqldf("select  min(word)
from rhb_flickr
where count ==52")%>%as.character()
png("plots/histogram_lavaux_text.png")
ggplot(lavaux_landschaft, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = x_intercept_lav_land, color='red')
dev.off()
png("plots/histogram_rhb_text.png")
ggplot(rhb_landschaft, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = x_intercept_rhb_land, color='red')
dev.off()
png("plots/histogram_lavaux_flickr.png")
ggplot(lavaux_flickr, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = x_intercept_lavaux_flickr, color='red')
dev.off()
png("plots/histogram_rhb_flickr.png")
ggplot(rhb_flickr, aes(x=word, y=count))+
geom_col()+
scale_x_discrete(labels=NULL)+
geom_vline(xintercept = x_intercept_rhb_flickr, color='red')
dev.off()
